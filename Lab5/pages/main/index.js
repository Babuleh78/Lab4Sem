import { ProductCardComponent } from "../../components/product-card/index.js";
import { ProductPage } from "../product/index.js";
import {ajax} from "../../modules/ajax.js";
import {urls} from "../../modules/urls.js";
import {GROUP_ID} from "../../modules/consts.js";

export class MainPage {

    constructor(parent) {
        this.parent = parent;
        this.maindata = [];
        this.philterdata = [];
    }
    
    get pageRoot() {
        return document.getElementById('main-page');
    }
    
    getHTML() {
        return `
        <div id="main-page" class="container-fluid p-4">
         <section class="filters-overlay">
            <h2> –§–∏–ª—å—Ç—Ä—ã <button class="collapse-button">‚ñº</button></h2>
            <div class="change-section-content">
                <input type="text" id="filter-city" placeholder="–ì–æ—Ä–æ–¥">
                <input type="text" id="filter-date" placeholder="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è">
                
                <div class="filter-group">
                    <label>–ü–æ–ª:</label>
                    <div class="button-group">
                        <button class="sex-button active" data-value="–º">–ú</button>
                        <button class="sex-button" data-value="–∂">–ñ</button>
                        <button class="sex-button" data-value="–Ω–µ —É–∫–∞–∑–∞–Ω">–ù–µ —É–∫–∞–∑–∞–Ω</button>
                    </div>
                </div>
                
                <div class="filter-group">
                    <label>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</label>
                    <div class="button-group">
                        <button class="activity-button active" data-value="1h">–ú–µ–Ω–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥</button>
                        <button class="activity-button" data-value="24h">–ú–µ–Ω–µ–µ —Å—É—Ç–æ–∫ –Ω–∞–∑–∞–¥</button>
                    </div>
                </div>
                
                <div class="action-buttons">
                    <button id="filter-button">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                    <button id="sbros-button">–°–±—Ä–æ—Å</button>
                </div>
            </div>
        </section>

                <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-4" id="cards-container">
                    
                </div>

            
        </div>
        `;
    }
    
    async getData() {
        try {
            
            const apiResponse = await ajax.post(urls.getGroupMembers(GROUP_ID));
            
            const memberIds = apiResponse.response.items.slice(0, 20);
            const usersInfo = await ajax.post(urls.getUltimate(memberIds));
            
            return usersInfo.response;
            
        } catch (error) {
            console.error('–õ–æ—à–∞—Ä–∞:', error);
            return [];
        }
    }
    
    clickCard(item, e) {
        const cardId = e.target.dataset.id;
        const productPage = new ProductPage(this.parent, cardId);
        productPage.render(item);
    }
    
   
    
    filterData(data, filters) {
        return data.filter(member => {
            // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
            if (filters.city && member.city?.id !== filters.city) {
                return false;
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
            if (filters.sex && member.sex !== filters.sex) {
                return false;
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
            if (filters.bdate) {
                if (!member.bdate) return false;
                
                const [day, month, year] = member.bdate.split('.');
                const birthDate = new Date(year || 2000, month - 1, day); // –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º 2000
                
                if (filters.bdate.min && birthDate < new Date(filters.bdate.min)) {
                    return false;
                }
                
                if (filters.bdate.max && birthDate > new Date(filters.bdate.max)) {
                    return false;
                }
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (filters.lastSeen) {
                if (!member.last_seen?.time) return false;
                
                const lastSeenTime = member.last_seen.time * 1000; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º—Å
                const now = Date.now();
                const diffHours = (now - lastSeenTime) / (1000 * 60 * 60);
                
                if (filters.lastSeen === '1h' && diffHours > 1) {
                    return false;
                }
                
                if (filters.lastSeen === '24h' && diffHours > 24) {
                    return false;
                }
                
                if (filters.lastSeen === 'recently' && diffHours > 24 * 7) {
                    return false;
                }
            }
            
            return true;
        });
    }
    
    formatLastSeen(lastSeen) {
        const now = new Date();
        const lastSeenDate = new Date(lastSeen.time * 1000);
        const diffMinutes = Math.floor((now - lastSeenDate) / (1000 * 60));
        
        if (diffMinutes < 1) return "–¢–æ–ª—å–∫–æ —á—Ç–æ";
        if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
        if (diffMinutes < 1440) return `${Math.floor(diffMinutes / 60)} —á. –Ω–∞–∑–∞–¥`;
        return lastSeenDate.toLocaleDateString();
    }

    // –¢–µ–∫—Å—Ç –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
    getRelationText(relation) {
        const relations = {
            1: '–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º',
            2: '–ï—Å—Ç—å –¥—Ä—É–≥/–ï—Å—Ç—å –ø–æ–¥—Ä—É–≥–∞',
            3: '–ü–æ–º–æ–ª–≤–ª–µ–Ω/–ü–æ–º–æ–ª–≤–ª–µ–Ω–∞',
            4: '–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º',
            5: '–í—Å—ë —Å–ª–æ–∂–Ω–æ',
            6: '–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ',
            7: '–í–ª—é–±–ª—ë–Ω/–í–ª—é–±–ª–µ–Ω–∞',
            8: '–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ'
        };
        return relations[relation] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
    formatEducation(education) {
        return {
            university: education.university_name ?? null,
            faculty: education.faculty_name ?? null,
            graduation: education.graduation ?? null
        };
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—å–µ—Ä–µ
    formatCareer(career) {
        return career.map(job => ({
            company: job.company ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            position: job.position ?? "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
            from: job.from ?? null,
            to: job.to ?? null
        }));
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞—Ö
    formatRelatives(relatives) {
        return relatives.map(rel => ({
            type: rel.type === 'child' ? '–†–µ–±–µ–Ω–æ–∫' : '–†–æ–¥–∏—Ç–µ–ª—å',
            name: rel.name ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            id: rel.id ? `vk.com/id${rel.id}` : null
        }));
    }
    
    setupEventListeners(){

        const collapseButton = this.pageRoot.querySelector('.collapse-button');
        const content = this.pageRoot.querySelector('.change-section-content');
        
        content.style.display = "none";
        collapseButton.textContent = "‚ñ∂";
        
        collapseButton.addEventListener('click', () => {
            if (content.style.display === "none") {
                content.style.display = "block";
                collapseButton.textContent = "üîΩ";
            } else {
                content.style.display = "none";
                collapseButton.textContent = "‚ñ∂";
            }
        });
        
        
        const filterButton = this.pageRoot.querySelector('#filter-button');
        filterButton.addEventListener('click', this.filterData.bind(this));

        // const sbrosButton = this.pageRoot.querySelector('#sbros-button');
        // sbrosButton.addEventListener('click', ()=>{this.response ='http://localhost:8000/data/get'; this.render(); });
        document.querySelectorAll('.sex-button, .activity-button').forEach(button => {
            button.addEventListener('click', function() {
                // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥—Ä—É–ø–ø–µ
                this.parentNode.querySelectorAll('button').forEach(btn => {
                    btn.classList.remove('active');
                });
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ–ª—å–∫–æ –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
                this.classList.add('active');
            });
        });
        
        document.getElementById('filter-button').addEventListener('click', function() {
            const activeSex = document.querySelector('.sex-button.active').dataset.value;
            const activeActivity = document.querySelector('.activity-button.active').dataset.value;
            
            console.log('–í—ã–±—Ä–∞–Ω –ø–æ–ª:', activeSex);
            console.log('–í—ã–±—Ä–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:', activeActivity);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        });
        
        document.getElementById('sbros-button').addEventListener('click', function() {
            // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
            document.querySelectorAll('.button-group button').forEach(btn => {
                btn.classList.remove('active');
            });
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            document.querySelectorAll('.button-group button:first-child').forEach(btn => {
                btn.classList.add('active');
            });
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
            document.querySelectorAll('input[type="text"]').forEach(input => {
                input.value = '';
            });
        });
    }
    async render() {
        this.parent.innerHTML = '';
        this.parent.insertAdjacentHTML('beforeend', this.getHTML());

        const cardsContainer = document.getElementById('cards-container');
        const data = await this.getData();
        
        if(this.maindata.length === 0){ 
            this.maindata = data
            this.philterdata = data
        }
        console.log(data[0]);

        if (data) {

            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
            

            data.forEach((item, index) => {
              
                const modifiedItem = {
                    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    first_name: item.first_name ?? "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    last_name: item.last_name ?? "–§–∞–º–∏–ª–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                    nickname: item.nickname ?? null,
                    maiden_name: item.maiden_name ?? null,
                    
                    // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
                    photo: item.photo_max_orig ?? item.photo_400 ?? item.photo_200 ?? "default_avatar.jpg",
                    
                    // –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    sex: typeof item.sex === 'number' 
                        ? (item.sex === 2 ? "–ú—É–∂—Å–∫–æ–π" : item.sex === 1 ? "–ñ–µ–Ω—Å–∫–∏–π" : "–ù–µ —É–∫–∞–∑–∞–Ω") 
                        : "–ù–µ —É–∫–∞–∑–∞–Ω",
                    bdate: item.bdate ?? "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    city: item.city?.title ?? "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω",
                    country: item.country?.title ?? "–°—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                    domain: item.domain ? `vk.com/${item.domain}` : null,
                    
                    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    online: item.online ? "–û–Ω–ª–∞–π–Ω" : "–û—Ñ—Ñ–ª–∞–π–Ω",
                    last_seen: item.last_seen ? this.formatLastSeen(item.last_seen) : "–ù–µ–¥–∞–≤–Ω–æ",
                    status: item.status ?? "–°—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    
                    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
                    relation: item.relation ? this.getRelationText(item.relation) : "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    relatives: item.relatives ? this.formatRelatives(item.relatives) : "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    can_write_private_message: item.can_write_private_message ? "–î–∞" : "–ù–µ—Ç",
                    
                    // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞
                    education: item.education ? this.formatEducation(item.education) : null,
                    universities: item.universities ?? [],
                    schools: item.schools ?? [],
                    occupation: item.occupation ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    career: item.career ? this.formatCareer(item.career) : "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    
                    // –ò–Ω—Ç–µ—Ä–µ—Å—ã
                    activities: item.activities ?? "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                    interests: item.interests ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                    music: item.music ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                    movies: item.movies ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                    tv: item.tv ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                    books: item.books ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                    games: item.games ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                    about: item.about ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                    
                    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
                    contacts: {
                        mobile_phone: item.mobile_phone ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                        home_phone: item.home_phone ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                        site: item.site ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                        skype: item.skype ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                        facebook: item.facebook ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                        twitter: item.twitter ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ",
                        instagram: item.instagram ??  "–ù–µ —É–∫–∑–∞–∞–Ω–æ"
                    },
                    
                    
                };
                
                
                const productCard = new ProductCardComponent(cardsContainer);
                productCard.render(modifiedItem, index, this.clickCard.bind(this, modifiedItem));
                
                
            });
        } else{
            console.log("NO DATA");
        }
        
        this.setupEventListeners();
        
    }
    
    getFirstTwoSentences(text) {
        if (!text) return '';
        const sentences = text.split(/(?<=[.!?])\s+/);
        return sentences.slice(0, 2).join(' '); 
    }
}