import { ProductCardComponent } from "../../components/product-card/index.js";
import { ProductPage } from "../product/index.js";
import {ajax} from "../../modules/ajax.js";
import {urls} from "../../modules/urls.js";
import {GROUP_ID} from "../../modules/consts.js";

export class MainPage {

    response = 'http://localhost:8000/data/get'
    constructor(parent) {
        this.parent = parent;
    }
    
    get pageRoot() {
        return document.getElementById('main-page');
    }
    
    getHTML() {
        return `
        <div id="main-page" class="container-fluid p-4">
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-4" id="cards-container">
                
            </div>
        </div>
        `;
    }
    
    async getData() {
        try {
            
            const apiResponse = await ajax.post(urls.getGroupMembers(GROUP_ID));
            
            const memberIds = apiResponse.response.items.slice(0, 20);
            const usersInfo = await ajax.post(urls.getUltimate(memberIds));
            
            return usersInfo.response;
            
        } catch (error) {
            console.error('–õ–æ—à–∞—Ä–∞:', error);
            return [];
        }
    }
    
    clickCard(item, e) {
        const cardId = e.target.dataset.id;
        const productPage = new ProductPage(this.parent, cardId);
        productPage.render(item);
    }
    
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        const collapseButton = this.pageRoot.querySelector('.collapse-button');
        const content = this.pageRoot.querySelector('.change-section-content');
        
        content.style.display = "none";
        collapseButton.textContent = "‚ñ∂";
        
        collapseButton.addEventListener('click', () => {
            if (content.style.display === "none") {
                content.style.display = "block";
                collapseButton.textContent = "üîΩ";
            } else {
                content.style.display = "none";
                collapseButton.textContent = "‚ñ∂";
            }
        });
        
        
        const filterButton = this.pageRoot.querySelector('#filter-button');
        filterButton.addEventListener('click', this.filterData.bind(this));

        const sbrosButton = this.pageRoot.querySelector('#sbros-button');
        sbrosButton.addEventListener('click', ()=>{this.response ='http://localhost:8000/data/get'; this.render(); });
    }
    
    filterData() {

        
        const id_cond = document.getElementById('filter-id').value;
        const date_cond = document.getElementById('filter-date').value;
        const title_cond = document.getElementById('filter-title').value;
        const explanation_cond = document.getElementById('filter-explanation').value;
        const url_cond = document.getElementById('filter-url').value;

        const queryParams = new URLSearchParams();

        if (id_cond) queryParams.append('id', id_cond);
        if (date_cond) queryParams.append('date_after', date_cond);
        if (title_cond) queryParams.append('title_like', title_cond);
        if (explanation_cond) queryParams.append('explanation_length', explanation_cond);
        if (url_cond) queryParams.append('url_length', url_cond);
   
        this.response = 'http://localhost:8000/data/filter?';
        this.response+=queryParams.toString();
       
        this.render();
    }
    
    
    async render() {
        this.parent.innerHTML = '';
        this.parent.insertAdjacentHTML('beforeend', this.getHTML());

        const cardsContainer = document.getElementById('cards-container');
        const data = await this.getData();
       
        if (data) {

            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
        function formatLastSeen(lastSeen) {
            const now = new Date();
            const lastSeenDate = new Date(lastSeen.time * 1000);
            const diffMinutes = Math.floor((now - lastSeenDate) / (1000 * 60));
            
            if (diffMinutes < 1) return "–¢–æ–ª—å–∫–æ —á—Ç–æ";
            if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
            if (diffMinutes < 1440) return `${Math.floor(diffMinutes / 60)} —á. –Ω–∞–∑–∞–¥`;
            return lastSeenDate.toLocaleDateString();
        }

        // –¢–µ–∫—Å—Ç –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
        function getRelationText(relation) {
            const relations = {
                1: '–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º',
                2: '–ï—Å—Ç—å –¥—Ä—É–≥/–ï—Å—Ç—å –ø–æ–¥—Ä—É–≥–∞',
                3: '–ü–æ–º–æ–ª–≤–ª–µ–Ω/–ü–æ–º–æ–ª–≤–ª–µ–Ω–∞',
                4: '–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º',
                5: '–í—Å—ë —Å–ª–æ–∂–Ω–æ',
                6: '–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ',
                7: '–í–ª—é–±–ª—ë–Ω/–í–ª—é–±–ª–µ–Ω–∞',
                8: '–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ'
            };
            return relations[relation] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
        function formatEducation(education) {
            return {
                university: education.university_name ?? null,
                faculty: education.faculty_name ?? null,
                graduation: education.graduation ?? null
            };
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—å–µ—Ä–µ
        function formatCareer(career) {
            return career.map(job => ({
                company: job.company ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                position: job.position ?? "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                from: job.from ?? null,
                to: job.to ?? null
            }));
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞—Ö
        function formatRelatives(relatives) {
            return relatives.map(rel => ({
                type: rel.type === 'child' ? '–†–µ–±–µ–Ω–æ–∫' : '–†–æ–¥–∏—Ç–µ–ª—å',
                name: rel.name ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                id: rel.id ? `vk.com/id${rel.id}` : null
            }));
        }

            data.forEach((item, index) => {
              
                const modifiedItem = {
                    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    first_name: item.first_name ?? "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    last_name: item.last_name ?? "–§–∞–º–∏–ª–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                    nickname: item.nickname ?? null,
                    maiden_name: item.maiden_name ?? null,
                    
                    // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
                    photo: item.photo_max_orig ?? item.photo_400 ?? item.photo_200 ?? "default_avatar.jpg",
                    
                    // –î–µ–º–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    sex: typeof item.sex === 'number' 
                        ? (item.sex === 2 ? "–ú—É–∂—Å–∫–æ–π" : item.sex === 1 ? "–ñ–µ–Ω—Å–∫–∏–π" : "–ù–µ —É–∫–∞–∑–∞–Ω") 
                        : "–ù–µ —É–∫–∞–∑–∞–Ω",
                    bdate: item.bdate ?? "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                    city: item.city?.title ?? "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω",
                    country: item.country?.title ?? "–°—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                    domain: item.domain ? `vk.com/${item.domain}` : null,
                    
                    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    online: item.online ? "–û–Ω–ª–∞–π–Ω" : "–û—Ñ—Ñ–ª–∞–π–Ω",
                    last_seen: item.last_seen ? formatLastSeen(item.last_seen) : "–ù–µ–¥–∞–≤–Ω–æ",
                    status: item.status ?? "–°—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    
                    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
                    relation: item.relation ? getRelationText(item.relation) : "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    relatives: item.relatives ? formatRelatives(item.relatives) : [],
                    can_write_private_message: item.can_write_private_message ? "–î–∞" : "–ù–µ—Ç",
                    
                    // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞
                    education: item.education ? formatEducation(item.education) : null,
                    universities: item.universities ?? [],
                    schools: item.schools ?? [],
                    occupation: item.occupation ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    career: item.career ? formatCareer(item.career) : [],
                    
                    // –ò–Ω—Ç–µ—Ä–µ—Å—ã
                    activities: item.activities ?? null,
                    interests: item.interests ?? null,
                    music: item.music ?? null,
                    movies: item.movies ?? null,
                    tv: item.tv ?? null,
                    books: item.books ?? null,
                    games: item.games ?? null,
                    about: item.about ?? null,
                    
                    // –ö–æ–Ω—Ç–∞–∫—Ç—ã
                    contacts: {
                        mobile_phone: item.mobile_phone ?? null,
                        home_phone: item.home_phone ?? null,
                        site: item.site ?? null,
                        skype: item.skype ?? null,
                        facebook: item.facebook ?? null,
                        twitter: item.twitter ?? null,
                        instagram: item.instagram ?? null
                    },
                    
                    // –°—á–µ—Ç—á–∏–∫–∏
                    counters: item.counters ?? {
                        friends: 0,
                        photos: 0,
                        videos: 0,
                        followers: 0
                    }
                };
                
                const productCard = new ProductCardComponent(cardsContainer);
                productCard.render(modifiedItem, index, this.clickCard.bind(this, modifiedItem));
              
            });
        } else{
            console.log("NO DATA");
        }
        
        this.setupEventListeners();
    }
    
    getFirstTwoSentences(text) {
        if (!text) return '';
        const sentences = text.split(/(?<=[.!?])\s+/);
        return sentences.slice(0, 2).join(' '); 
    }
}